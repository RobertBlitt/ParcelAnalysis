import sys print(sys.executable) import sys print(sys.executable) import sys print(sys.executable)
exec(open(r"C:\Users\rober\OneDrive\Documents\GIS_Projects\ParcelAnalysis\scripts\simple_projection_check.py").read())
exec(open(r'C:\Users\rober\OneDrive\Documents\GIS_Projects\ParcelAnalysis\scripts\Clean_Slate_Academic_Start.py').read())
exec(open(r'C:\Users\rober\OneDrive\Documents\GIS_Projects\ParcelAnalysis\scripts\Clean_Academic_Start_Fixed.py').read())
""" Hawaii Cesspool Matrix Analysis - Clean Academic Start University of Hawaii Water Resources Research Center Fixed version for Jupyter Notebooks with ArcPy Resolves arcgisscripting module errors in ArcGIS Pro """  print("=" * 70) print("Hawaii Cesspool Matrix Analysis - Clean Start") print("=" * 70) print("Academic Framework - University of Hawaii WRRC") print("Map: Parcel_Analysis_Statewide")  import datetime print(f"Started: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")  # Import required libraries with error handling import os import sys  # Initialize flag for successful ArcPy import arcpy_available = False  try:     # Try importing ArcPy with basic initialization     print("\nInitializing ArcGIS environment...")     import arcpy          # Skip the problematic geoprocessing environment setup that causes arcgisscripting errors     # Instead, set up minimal required environment     arcpy.env.overwriteOutput = True          # Test if arcpy is working without triggering arcgisscripting.create()     try:         # Simple test that doesn't require full geoprocessing initialization           version_info = arcpy.GetInstallInfo()         print(f"ArcGIS Pro Version: {version_info['Version']}")         arcpy_available = True              except Exception as e:         print(f"ArcPy basic functions unavailable: {str(e)}")         print("Continuing with file-system based approach...")         arcpy_available = False          except ImportError as e:     print(f"ArcPy import failed: {str(e)}")     print("Running in non-ArcGIS environment")     arcpy_available = False  # Set up workspace paths if arcpy_available:     try:         # Try to get current project workspace         aprx = arcpy.mp.ArcGISProject("CURRENT")         workspace = aprx.homeFolder         print(f"Using ArcGIS Pro project workspace: {workspace}")     except:         # Fallback to known path structure         workspace = r"C:\Users\rober\OneDrive\Documents\GIS_Projects\ParcelAnalysis"         print(f"Using fallback workspace: {workspace}") else:     workspace = r"C:\Users\rober\OneDrive\Documents\GIS_Projects\ParcelAnalysis"     print(f"Using file-system workspace: {workspace}")  print(f"Workspace set to: {workspace}")  # Define key directories data_dir = os.path.join(workspace, "data") scripts_dir = os.path.join(workspace, "scripts")  outputs_dir = os.path.join(workspace, "outputs") foundation_dir = os.path.join(outputs_dir, "foundation")  # Create directories if they don't exist required_dirs = [data_dir, scripts_dir, outputs_dir, foundation_dir]  print("\nChecking directory structure...") for dir_path in required_dirs:     if not os.path.exists(dir_path):         try:             os.makedirs(dir_path)             print(f"Created: {dir_path}")         except Exception as e:             print(f"Warning: Could not create {dir_path}: {str(e)}")     else:         print(f"Found: {dir_path}")  # Define key file paths for Hawaii Cesspool Matrix Analysis key_files = {     "technology_matrix": os.path.join(data_dir, "TechnologyTreatmentDisposalTreat.xlsx"),     "parcel_data": os.path.join(data_dir, "parcels", "statewide_parcels.shp"),     "cesspool_inventory": os.path.join(data_dir, "iww_inventory", "cesspool_locations.shp"),     "wells_municipal": os.path.join(data_dir, "wells", "municipal_wells.shp"),     "wells_domestic": os.path.join(data_dir, "wells", "domestic_wells.shp"),     "dem_statewide": os.path.join(data_dir, "elevation", "hawaii_dem.tif"),     "soils": os.path.join(data_dir, "soils", "hawaii_soils.shp"),     "zoning": os.path.join(data_dir, "zoning", "county_zoning.shp") }  print("\nChecking key data files...") for file_key, file_path in key_files.items():     if os.path.exists(file_path):         print(f"✓ Found: {file_key}")     else:         print(f"⚠ Missing: {file_key} at {file_path}")  # Initialize processing log log_file = os.path.join(outputs_dir, "processing_log.txt")  def write_log(message):     """Write message to both console and log file"""     timestamp = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')     log_message = f"[{timestamp}] {message}"     print(log_message)          try:         with open(log_file, 'a', encoding='utf-8') as f:             f.write(log_message + '\n')     except Exception as e:         print(f"Warning: Could not write to log file: {str(e)}")  write_log("Hawaii Cesspool Matrix Analysis initialization complete")  # Define the analysis workflow phases analysis_phases = {     "Phase 1": "Foundation Setup - Parcel data preparation and basic attribute joins",     "Phase 2": "Site Conditions - Calculate slope, soil type, groundwater depth",      "Phase 3": "Infrastructure Proximity - Distance to existing systems",     "Phase 4": "Regulatory Overlays - Zoning, environmental constraints",     "Phase 5": "Technology Suitability - Apply binary matrix sieve analysis",     "Phase 6": "Results Integration - Combine with HCPT priority rankings" }  write_log("Analysis workflow phases defined:") for phase, description in analysis_phases.items():     write_log(f"  {phase}: {description}")  # Set up coordinate system (Hawaii Statewide - UTM Zone 4N, NAD83 HARN) target_crs = "PROJCS['NAD_1983_HARN_UTM_Zone_4N'...]"  # Full WKT would go here write_log("Target coordinate system: NAD 1983 HARN UTM Zone 4N")  if arcpy_available:     try:         # Set spatial reference for all operations         spatial_ref = arcpy.SpatialReference(32604)  # UTM Zone 4N         arcpy.env.outputCoordinateSystem = spatial_ref         write_log("ArcPy coordinate system set successfully")     except Exception as e:         write_log(f"Warning: Could not set coordinate system in ArcPy: {str(e)}")         write_log("Will handle coordinate transformations manually")  # Function to safely process spatial data def process_with_error_handling(operation_name, operation_func):     """Execute spatial operations with comprehensive error handling"""     write_log(f"Starting: {operation_name}")          try:         result = operation_func()         write_log(f"Completed: {operation_name}")         return result              except Exception as e:         write_log(f"Error in {operation_name}: {str(e)}")                  # Provide specific guidance based on error type         error_str = str(e).lower()                  if "arcgisscripting" in error_str:             write_log("SOLUTION: This is an ArcGIS Pro installation issue.")             write_log("Try: 1) Restart ArcGIS Pro, 2) Run as Administrator, 3) Repair ArcGIS Pro installation")                      elif "coordinate system" in error_str or "spatial reference" in error_str:             write_log("SOLUTION: Coordinate system mismatch detected.")             write_log("Use Data Management Tools > Projections > Project to standardize coordinate systems")                      elif "lock" in error_str or "schema" in error_str:             write_log("SOLUTION: Data access issue detected.")             write_log("Close all applications that might be accessing the data files")                      elif "memory" in error_str:             write_log("SOLUTION: Memory issue detected.")             write_log("Process data in smaller chunks or restart ArcGIS Pro")                      return None  # PHASE 1: Foundation Setup Function def foundation_setup():     """Set up the foundation analysis structure"""     write_log("=== PHASE 1: FOUNDATION SETUP ===")          # Check if we're running in Jupyter Notebook     jupyter_mode = 'ipykernel' in sys.modules     write_log(f"Environment: {'Jupyter Notebook' if jupyter_mode else 'ArcGIS Pro Python Window'}")          if jupyter_mode:         write_log("Jupyter Notebook detected - using pandas-based workflow")         try:             import pandas as pd             import geopandas as gpd             write_log("GeoPandas available for spatial operations")                          # Load technology matrix using pandas             tech_matrix_path = key_files["technology_matrix"]             if os.path.exists(tech_matrix_path):                 df = pd.read_excel(tech_matrix_path)                 write_log(f"Technology matrix loaded: {len(df)} technologies, {len(df.columns)} criteria")                 return df             else:                 write_log(f"Technology matrix not found at: {tech_matrix_path}")                 return None                          except ImportError:             write_log("Pandas/GeoPandas not available - switching to ArcPy workflow")                  if arcpy_available:         write_log("ArcPy available - using ArcGIS workflow")         # ArcPy-based foundation setup would go here         return "ArcPy workflow initialized"     else:         write_log("Neither Jupyter nor ArcPy fully available - manual setup required")         return None  # Main execution if __name__ == "__main__":     write_log("Initializing Hawaii Cesspool Matrix Analysis...")          # Attempt foundation setup with error handling     foundation_result = process_with_error_handling(         "Foundation Setup",          foundation_setup     )          if foundation_result is not None:         write_log("SUCCESS: Foundation setup completed successfully")         write_log("Ready to proceed with Phase 2: Site Conditions Analysis")                  # Provide next steps guidance         write_log("\n=== NEXT STEPS ===")         write_log("1. Review the processing log for any warnings")         write_log("2. Verify all required data files are available")          write_log("3. Run Phase 2: Site Conditions calculation")         write_log("4. Apply technology suitability matrix")              else:         write_log("Foundation setup encountered issues - review log for solutions")              write_log("=== INITIALIZATION COMPLETE ===")
exec(open(r'C:\Users\rober\OneDrive\Documents\GIS_Projects\ParcelAnalysis\scripts\Step1_Wells_Master_Table.py').read())
